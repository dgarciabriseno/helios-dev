/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Helios
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.4.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = global.fetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * A coordinate to be used with the Helios web application. This coordinate has been transformed into a common reference coordinate system with sun at the origin. This coordinate system is the coordinate frame defined by `sunpy.coordinates.get_earth(\"2018-08-11 00:00:00\")`.  <br/> All coordinates returned by this API are converted to this coordinate system by the code:  ```python with transform_with_sun_center():     coords = base_coords.transform_to(sunpy.coordinates.get_earth(\"2018-08-11 00:00:00\"))     coords.representation_type=\"cartesian\"     return {         \"x\": coords.x.to(u.solRad).value,         \"y\": coords.y.to(u.solRad).value,         \"z\": coords.z.to(u.solRad).value     }
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
    /**
     *
     * @type {any}
     * @memberof Coordinate
     */
    x: any;
    /**
     *
     * @type {any}
     * @memberof Coordinate
     */
    y: any;
    /**
     *
     * @type {any}
     * @memberof Coordinate
     */
    z: any;
}
/**
 *
 * @export
 * @interface EphemerisResponse
 */
export interface EphemerisResponse {
    /**
     * One coordinate for each date given
     * @type {any}
     * @memberof EphemerisResponse
     */
    positions: any;
}
/**
 *
 * @export
 * @interface Event
 */
export interface Event {
    /**
     *
     * @type {EventCoordinateDetails}
     * @memberof Event
     */
    coordinates: EventCoordinateDetails;
    /**
     *
     * @type {any}
     * @memberof Event
     */
    voEvent: any;
}
/**
 *
 * @export
 * @interface EventCoordinateDetails
 */
export interface EventCoordinateDetails {
    /**
     *
     * @type {EventPosition}
     * @memberof EventCoordinateDetails
     */
    event: EventPosition;
    /**
     *
     * @type {any}
     * @memberof EventCoordinateDetails
     */
    notes: any;
    /**
     *
     * @type {Coordinate}
     * @memberof EventCoordinateDetails
     */
    observer: Coordinate;
}
/**
 *
 * @export
 * @interface EventPosition
 */
export interface EventPosition {
    /**
     *
     * @type {any}
     * @memberof EventPosition
     */
    lat: any;
    /**
     *
     * @type {any}
     * @memberof EventPosition
     */
    lon: any;
}
/**
 *
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     *
     * @type {any}
     * @memberof EventResponse
     */
    results: any;
}
/**
 *
 * @export
 * @interface GetRecentResponse
 */
export interface GetRecentResponse {
    /**
     *
     * @type {any}
     * @memberof GetRecentResponse
     */
    scenes: any;
}
/**
 *
 * @export
 * @interface HeliosExceptionResponse
 */
export interface HeliosExceptionResponse {
    /**
     * Description of what went wrong.
     * @type {any}
     * @memberof HeliosExceptionResponse
     */
    error: any;
}
/**
 *
 * @export
 * @interface LayerData
 */
export interface LayerData {
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    cadence: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    end: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    id?: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    scale: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    sceneId?: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    source: any;
    /**
     *
     * @type {any}
     * @memberof LayerData
     */
    start: any;
}
/**
 *
 * @export
 * @interface PostSceneResponse
 */
export interface PostSceneResponse {
    /**
     *
     * @type {any}
     * @memberof PostSceneResponse
     */
    id: any;
}
/**
 *
 * @export
 * @interface SceneData
 */
export interface SceneData {
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    createdAt?: any;
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    end: any;
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    id?: any;
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    layers: any;
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    start: any;
    /**
     *
     * @type {any}
     * @memberof SceneData
     */
    thumbnail: any;
}
/**
 *
 * @export
 * @interface ValidationErrorModel
 */
export interface ValidationErrorModel {
    /**
     * an optional object which contains values required to render the error message.
     * @type {any}
     * @memberof ValidationErrorModel
     */
    ctx?: any;
    /**
     * the error's location as a list.
     * @type {any}
     * @memberof ValidationErrorModel
     */
    loc?: any;
    /**
     * a computer-readable identifier of the error type.
     * @type {any}
     * @memberof ValidationErrorModel
     */
    msg?: any;
    /**
     * a human readable explanation of the error.
     * @type {any}
     * @memberof ValidationErrorModel
     */
    type_?: any;
}
/**
 * DataApi - fetch parameter creator
 * @export
 */
export const DataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Field lines generated from GONG data
         * @param {any} dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGongFieldLines(dates: any, options: any = {}): FetchArgs {
            // verify required parameter 'dates' is not null or undefined
            if (dates === null || dates === undefined) {
                throw new RequiredError('dates','Required parameter dates was null or undefined when calling getGongFieldLines.');
            }
            const localVarPath = `/pfss/gong/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Field lines generated from GONG data
         * @param {any} dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGongFieldLines(dates: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DataApiFetchParamCreator(configuration).getGongFieldLines(dates, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Field lines generated from GONG data
         * @param {any} dates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGongFieldLines(dates: any, options?: any) {
            return DataApiFp(configuration).getGongFieldLines(dates, options)(fetch, basePath);
        },
    };
};

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     *
     * @summary Field lines generated from GONG data
     * @param {any} dates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public getGongFieldLines(dates: any, options?: any) {
        return DataApiFp(this.configuration).getGongFieldLines(dates, options)(this.fetch, this.basePath);
    }

}
/**
 * EphemerisApi - fetch parameter creator
 * @export
 */
export const EphemerisApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get general coordinates
         * @param {any} provider One of the ephemeris providers. [&#x27;horizons&#x27;]
         * @param {any} body Observatory/Celestial body of interest.
         * @param {any} dates List of dates to return coordinates for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPosition(provider: any, body: any, dates: any, options: any = {}): FetchArgs {
            // verify required parameter 'provider' is not null or undefined
            if (provider === null || provider === undefined) {
                throw new RequiredError('provider','Required parameter provider was null or undefined when calling getBodyPosition.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getBodyPosition.');
            }
            // verify required parameter 'dates' is not null or undefined
            if (dates === null || dates === undefined) {
                throw new RequiredError('dates','Required parameter dates was null or undefined when calling getBodyPosition.');
            }
            const localVarPath = `/ephemeris/{provider}/{body}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)))
                .replace(`{${"body"}}`, encodeURIComponent(String(body)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get earth's coordinate at a specific date
         * @param {any} date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarthPosition(date: any, options: any = {}): FetchArgs {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getEarthPosition.');
            }
            const localVarPath = `/earth/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the observer position for a specific jpeg2000 image.
         * @summary Get observer coordinates for an image
         * @param {any} id Helioviewer JPEG2000 ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJp2Observer(id: any, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getJp2Observer.');
            }
            const localVarPath = `/observer/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EphemerisApi - functional programming interface
 * @export
 */
export const EphemerisApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get general coordinates
         * @param {any} provider One of the ephemeris providers. [&#x27;horizons&#x27;]
         * @param {any} body Observatory/Celestial body of interest.
         * @param {any} dates List of dates to return coordinates for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPosition(provider: any, body: any, dates: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EphemerisResponse> {
            const localVarFetchArgs = EphemerisApiFetchParamCreator(configuration).getBodyPosition(provider, body, dates, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get earth's coordinate at a specific date
         * @param {any} date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarthPosition(date: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Coordinate> {
            const localVarFetchArgs = EphemerisApiFetchParamCreator(configuration).getEarthPosition(date, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the observer position for a specific jpeg2000 image.
         * @summary Get observer coordinates for an image
         * @param {any} id Helioviewer JPEG2000 ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJp2Observer(id: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Coordinate> {
            const localVarFetchArgs = EphemerisApiFetchParamCreator(configuration).getJp2Observer(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EphemerisApi - factory interface
 * @export
 */
export const EphemerisApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get general coordinates
         * @param {any} provider One of the ephemeris providers. [&#x27;horizons&#x27;]
         * @param {any} body Observatory/Celestial body of interest.
         * @param {any} dates List of dates to return coordinates for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPosition(provider: any, body: any, dates: any, options?: any) {
            return EphemerisApiFp(configuration).getBodyPosition(provider, body, dates, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get earth's coordinate at a specific date
         * @param {any} date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEarthPosition(date: any, options?: any) {
            return EphemerisApiFp(configuration).getEarthPosition(date, options)(fetch, basePath);
        },
        /**
         * Returns the observer position for a specific jpeg2000 image.
         * @summary Get observer coordinates for an image
         * @param {any} id Helioviewer JPEG2000 ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJp2Observer(id: any, options?: any) {
            return EphemerisApiFp(configuration).getJp2Observer(id, options)(fetch, basePath);
        },
    };
};

/**
 * EphemerisApi - object-oriented interface
 * @export
 * @class EphemerisApi
 * @extends {BaseAPI}
 */
export class EphemerisApi extends BaseAPI {
    /**
     *
     * @summary Get general coordinates
     * @param {any} provider One of the ephemeris providers. [&#x27;horizons&#x27;]
     * @param {any} body Observatory/Celestial body of interest.
     * @param {any} dates List of dates to return coordinates for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EphemerisApi
     */
    public getBodyPosition(provider: any, body: any, dates: any, options?: any) {
        return EphemerisApiFp(this.configuration).getBodyPosition(provider, body, dates, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get earth's coordinate at a specific date
     * @param {any} date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EphemerisApi
     */
    public getEarthPosition(date: any, options?: any) {
        return EphemerisApiFp(this.configuration).getEarthPosition(date, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the observer position for a specific jpeg2000 image.
     * @summary Get observer coordinates for an image
     * @param {any} id Helioviewer JPEG2000 ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EphemerisApi
     */
    public getJp2Observer(id: any, options?: any) {
        return EphemerisApiFp(this.configuration).getJp2Observer(id, options)(this.fetch, this.basePath);
    }

}
/**
 * EventsApi - fetch parameter creator
 * @export
 */
export const EventsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a list of events between the given dates
         * @param {any} start
         * @param {any} end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(start: any, end: any, options: any = {}): FetchArgs {
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling getEvents.');
            }
            // verify required parameter 'end' is not null or undefined
            if (end === null || end === undefined) {
                throw new RequiredError('end','Required parameter end was null or undefined when calling getEvents.');
            }
            const localVarPath = `/event`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a list of events between the given dates
         * @param {any} start
         * @param {any} end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(start: any, end: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EventResponse> {
            const localVarFetchArgs = EventsApiFetchParamCreator(configuration).getEvents(start, end, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get a list of events between the given dates
         * @param {any} start
         * @param {any} end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(start: any, end: any, options?: any) {
            return EventsApiFp(configuration).getEvents(start, end, options)(fetch, basePath);
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     *
     * @summary Get a list of events between the given dates
     * @param {any} start
     * @param {any} end
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvents(start: any, end: any, options?: any) {
        return EventsApiFp(this.configuration).getEvents(start, end, options)(this.fetch, this.basePath);
    }

}
/**
 * SceneApi - fetch parameter creator
 * @export
 */
export const SceneApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a list of the latest scenes
         * @param {any} count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyShared(count: any, options: any = {}): FetchArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling getRecentlyShared.');
            }
            const localVarPath = `/scene/latest/{count}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get metadata for the given scene
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScene(id: any, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getScene.');
            }
            const localVarPath = `/scene/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Upload a new scene
         * @param {SceneData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveScene(body: SceneData, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveScene.');
            }
            const localVarPath = `/scene`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SceneData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SceneApi - functional programming interface
 * @export
 */
export const SceneApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a list of the latest scenes
         * @param {any} count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyShared(count: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetRecentResponse> {
            const localVarFetchArgs = SceneApiFetchParamCreator(configuration).getRecentlyShared(count, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get metadata for the given scene
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScene(id: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SceneData> {
            const localVarFetchArgs = SceneApiFetchParamCreator(configuration).getScene(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Upload a new scene
         * @param {SceneData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveScene(body: SceneData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PostSceneResponse> {
            const localVarFetchArgs = SceneApiFetchParamCreator(configuration).saveScene(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SceneApi - factory interface
 * @export
 */
export const SceneApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get a list of the latest scenes
         * @param {any} count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyShared(count: any, options?: any) {
            return SceneApiFp(configuration).getRecentlyShared(count, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get metadata for the given scene
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScene(id: any, options?: any) {
            return SceneApiFp(configuration).getScene(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Upload a new scene
         * @param {SceneData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveScene(body: SceneData, options?: any) {
            return SceneApiFp(configuration).saveScene(body, options)(fetch, basePath);
        },
    };
};

/**
 * SceneApi - object-oriented interface
 * @export
 * @class SceneApi
 * @extends {BaseAPI}
 */
export class SceneApi extends BaseAPI {
    /**
     *
     * @summary Get a list of the latest scenes
     * @param {any} count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public getRecentlyShared(count: any, options?: any) {
        return SceneApiFp(this.configuration).getRecentlyShared(count, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get metadata for the given scene
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public getScene(id: any, options?: any) {
        return SceneApiFp(this.configuration).getScene(id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Upload a new scene
     * @param {SceneData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public saveScene(body: SceneData, options?: any) {
        return SceneApiFp(this.configuration).saveScene(body, options)(this.fetch, this.basePath);
    }

}
